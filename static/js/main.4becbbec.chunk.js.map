{"version":3,"sources":["components/student/Student.js","components/group/Group.js","components/list/List.js","App.js","serviceWorker.js","index.js"],"names":["Student","props","state","name","data","this","Component","Group","getStates","dataComponent","students","total","length","onChangeCounter","setState","cancel","teacher","className","onClick","language","level","classroom","schedule","map","student","index","key","List","childChangeCounter","bind","states","groups","reduce","acc","group","course","App","listChangeCounter","initialState","lists","newLists","push","addData","list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4becbbec.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Student extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {name: props.data};\n    }\n    render () {\n        return (\n            <div>\n                Student : {this.state.name}\n            </div>\n        );\n    }\n}\n\nexport default Student;","import React, { Component } from 'react';\nimport './Group.css';\nimport Student from '../student/Student';\n\nclass Group extends Component {\n    constructor (props) {\n        super(props);\n        this.state=this.getStates(props);\n\n    }\n    getStates (props) {\n        let dataComponent={...props.data};\n        if (!dataComponent.students) dataComponent.students=[];\n        dataComponent.total = dataComponent.students.length;\n        return dataComponent;\n    }\n    cancel () {\n        this.props.onChangeCounter(this.state.total);\n        this.setState({cancel: true, teacher: '-', total: 0});\n    }\n    render () {\n        return (\n            <div className={this.state.cancel?'canceled group':'group'}>\n                <div className=\"container\">\n                    <div> Group <button onClick={()=> this.cancel()}>click</button> # total : <span className=\"red\">{this.state.total}</span> &nbsp; </div>\n                    <div> Language : {this.state.language} </div>\n                    <div> Level : {this.state.level} </div>\n                    <div> Classroom : {this.state.classroom} </div>\n                    <div> Teacher : {this.state.teacher} </div>\n                    <div> Schedule : {this.state.schedule} </div>\n                </div>\n                <div className=\"container\">\n                    {this.state.students.map((student, index) => {\n                        return (\n                            <div key={index}><div># {index} : </div><Student data={student}></Student><div>&nbsp;</div></div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Group;","import React, { Component } from 'react';\nimport Group from '../group/Group'\nimport './List.css'\n\nclass List extends Component {\n    constructor (props) {\n        super(props);\n        this.childChangeCounter=this.childChangeCounter.bind(this);\n        this.state=this.getStates(props);\n    }\n    getStates(props) {\n        const states = {...props.data};\n        states.total = states.groups.reduce((acc,group) => acc+(group && group.students ? group.students.length : 0),0);\n        return states;\n    }\n    childChangeCounter (reduce) {\n        this.setState({total: this.state.total-reduce});\n        this.props.onChangeCounter(reduce);\n    }\n    render () {\n        return (\n            <div className='list'>\n                <div>List : {this.state.course} # total : <span className='red'> {this.state.total} </span> </div>\n                {this.state.groups.map((group, index) => {\n                    return (\n                        <Group key={index} data={group} onChangeCounter={this.childChangeCounter}/>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/list/List';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.listChangeCounter=this.listChangeCounter.bind(this);\n    this.state = this.initialState();\n  }\n  initialState () {\n    return {\n      lists: [\n        {\n          course: 'English',\n          groups: [\n            {\n              language: 'English',\n              level: 'Basic-1',\n              classroom: 'B101',\n              teacher: 'p1',\n              schedule: 'lu-vi 7-9am',\n              students: [\n                'josé',\n                'juana',\n                'jorge',\n              ],\n            },\n            {\n              language: 'English',\n              level: 'Basic-2',\n              classroom: 'P101',\n              teacher: 'p3',\n              schedule: 'lu-vi 11-17',\n              students: [\n                'josé',\n                'juana',\n                'jorge',\n              ],\n            },\n            {\n              language: 'English',\n              level: 'Inter-4',\n              classroom: 'Z101',\n              teacher: 'p7',\n              schedule: 'sa-do 7-9am',\n              students: [\n                'josé',\n                'juana',\n                'jorge',\n              ],\n            },\n          ],\n        },\n        {\n          course: 'French',\n          groups: [\n            {\n              language: 'French',\n              level: 'Basic-1',\n              classroom: 'B101',\n              teacher: 'p1',\n              schedule: 'lu-vi 7-9am',\n            },\n            {\n              language: 'French',\n              level: 'Basic-2',\n              classroom: 'P101',\n              teacher: 'p3',\n              schedule: 'lu-vi 11-17',\n            },\n            {\n              language: 'French',\n              level: 'Inter-4',\n              classroom: 'Z101',\n              teacher: 'p7',\n              schedule: 'sa-do 7-9am',\n            }\n          ],\n        }\n      ],\n      total: 9,\n    };\n  }\n  addData () {\n    const newLists = [...this.state.lists];\n    newLists.push({\n      course: 'German',\n      groups: [\n        {\n          language: 'German',\n          level: 'Basic-1',\n          classroom: 'B101',\n          teacher: 'p1',\n          schedule: 'lu-vi 7-9am',\n        },\n        {\n          language: 'German',\n          level: 'Basic-2',\n          classroom: 'P101',\n          teacher: 'p3',\n          schedule: 'lu-vi 11-17',\n        },\n        {\n          language: 'German',\n          level: 'Inter-4',\n          classroom: 'Z101',\n          teacher: 'p7',\n          schedule: 'sa-do 7-9am',\n        }\n      ],\n    });\n    this.setState({lists: newLists});\n  }\n  listChangeCounter (reduce) {\n    this.setState({total: this.state.total-reduce});\n  }\n  render () {\n    return (\n      <div>\n        <button onClick={() => this.addData()}>Add</button>\n        Total students : <span className='red'>{this.state.total} </span>\n        {this.state.lists.map((list, index) => {\n          return (\n            <List key={index} data={list} onChangeCounter={this.listChangeCounter}/>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}