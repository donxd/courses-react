{"version":3,"sources":["components/student/Student.js","components/group/Group.js","redux/actions/actions.js","components/list/List.js","App.js","serviceWorker.js","redux/reducer/index.js","index.js"],"names":["Student","props","state","name","data","this","Component","Group","getStates","dataComponent","students","total","length","actionEvent","actionEventChangeList","idList","setState","cancel","teacher","className","onClick","language","level","classroom","schedule","map","student","index","key","connect","dispatch","change","type","payload","changeTotalStudents","changeTotalList","List","childChangeCounter","bind","states","groups","reduce","acc","group","onChangeCounter","nextProps","nextState","course","getListTotalStudents","undefined","totalStudents","lists","initialData","App","listChangeCounter","initialState","initialize","newLists","push","addData","list","console","log","Boolean","window","location","hostname","match","processChangeLists","processChangeGroup","changeLists","val","processInitializeLists","accG","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cec0969.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Student extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {name: props.data};\n    }\n    render () {\n        return (\n            <div>\n                Student : {this.state.name}\n            </div>\n        );\n    }\n}\n\nexport default Student;","import React, { Component } from 'react';\nimport './Group.css';\nimport Student from '../student/Student';\nimport { connect } from 'react-redux';\nimport { changeTotalStudents, changeTotalList } from '../../redux/actions/actions';\n\nclass Group extends Component {\n    constructor (props) {\n        super(props);\n        this.state=this.getStates(props);\n\n    }\n    getStates (props) {\n        let dataComponent={...props.data};\n        if (!dataComponent.students) dataComponent.students=[];\n        dataComponent.total = dataComponent.students.length;\n        return dataComponent;\n    }\n    cancel () {\n        this.props.actionEvent(this.state.total*-1);\n        this.props.actionEventChangeList(this.state.idList, (this.state.total*-1));\n        this.setState({cancel: true, teacher: '-', total: 0});\n    }\n    render () {\n        return (\n            <div className={this.state.cancel?'canceled group':'group'}>\n                <div className=\"container\">\n                    <div> Group <button onClick={()=> this.cancel()}>click</button> # total : <span className=\"red\">{this.state.total}</span> &nbsp; </div>\n                    <div> {this.state.idList } &nbsp; </div>\n                    <div> Language : {this.state.language} </div>\n                    <div> Level : {this.state.level} </div>\n                    <div> Classroom : {this.state.classroom} </div>\n                    <div> Teacher : {this.state.teacher} </div>\n                    <div> Schedule : {this.state.schedule} </div>\n                </div>\n                <div className=\"container\">\n                    {this.state.students.map((student, index) => {\n                        return (\n                            <div key={index}><div># {index} : </div><Student data={student}></Student><div>&nbsp;</div></div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, props) => {\n    return state;\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n    const eventExecute = change => dispatch(changeTotalStudents(change));\n    const eventChangeList = (idList, change) => dispatch(changeTotalList(idList,change));\n\n    return {\n        actionEvent: eventExecute,\n        actionEventChangeList: eventChangeList,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);","export const CHANGE_TOTAL_STUDENTS_LISTS = 'CHANGE_TOTAL_STUDENTS_LISTS';\nexport const CHANGE_TOTAL_STUDENTS_GROUP = 'CHANGE_TOTAL_STUDENTS_GROUP';\nexport const INITIALIZE_LISTS = 'INITIALIZE_LISTS';\n\nexport const changeTotalStudents = change => ({\n    type: CHANGE_TOTAL_STUDENTS_LISTS,\n    payload: {\n        change,\n    },\n});\n\nexport const changeTotalList = (idList, change) => ({\n    type: CHANGE_TOTAL_STUDENTS_GROUP,\n    payload: {\n        idList,\n        change,\n    },\n});\n\nexport const initializeLists = lists => ({\n    type: INITIALIZE_LISTS,\n    payload: {\n        lists,\n    },\n});","import React, { Component } from 'react';\nimport Group from '../group/Group'\nimport './List.css'\nimport { connect } from 'react-redux';\n\nclass List extends Component {\n    constructor (props) {\n        super(props);\n        this.childChangeCounter=this.childChangeCounter.bind(this);\n        this.state=this.getStates(props);\n    }\n    getStates(props) {\n        const states = {...props.data};\n        states.total = states.groups.reduce((acc,group) => acc+(group && group.students ? group.students.length : 0),0);\n        return states;\n    }\n    childChangeCounter (reduce) {\n        this.setState({total: this.state.total-reduce});\n        this.props.onChangeCounter(reduce);\n    }\n    shouldComponentUpdate (nextProps, nextState) {\n        nextState.total = nextProps.total;\n        return true;\n    }\n    render () {\n        return (\n            <div className='list'>\n                <div>List : {this.state.course} # total : <span className='red'> {this.state.total} </span> </div>\n                {this.state.groups.map((group, index) => {\n                    group.idList = this.props.data.index;\n                    return (\n                        <Group key={index} data={group} onChangeCounter={this.childChangeCounter}/>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, props) => {\n    const data = state.lists[props.data.index];\n    if (data) {\n        return {\n            total: getListTotalStudents(data, props),\n            groups: data.groups,\n        };\n    }\n\n    return {};\n};\n\nfunction getListTotalStudents (data, props) {\n    if (data.totalStudents !== undefined) return data.totalStudents;\n\n    return data.groups.reduce((acc,group) => acc+(group && group.students ? group.students.length : 0),0);\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/list/List';\nimport { connect } from 'react-redux';\nimport { initializeLists } from './redux/actions/actions';\n\nconst initialData = {\n  lists: [\n    {\n      course: 'English',\n      groups: [\n        {\n          language: 'English',\n          level: 'Basic-1',\n          classroom: 'B101',\n          teacher: 'p1',\n          schedule: 'lu-vi 7-9am',\n          students: [\n            'josé',\n            'juana',\n            'jorge',\n          ],\n        },\n        {\n          language: 'English',\n          level: 'Basic-2',\n          classroom: 'P101',\n          teacher: 'p3',\n          schedule: 'lu-vi 11-17',\n          students: [\n            'josé',\n            'juana',\n            'jorge',\n          ],\n        },\n        {\n          language: 'English',\n          level: 'Inter-4',\n          classroom: 'Z101',\n          teacher: 'p7',\n          schedule: 'sa-do 7-9am',\n          students: [\n            'josé',\n            'juana',\n            'jorge',\n          ],\n        },\n      ],\n    },\n    {\n      course: 'French',\n      groups: [\n        {\n          language: 'French',\n          level: 'Basic-1',\n          classroom: 'B101',\n          teacher: 'p1',\n          schedule: 'lu-vi 7-9am',\n        },\n        {\n          language: 'French',\n          level: 'Basic-2',\n          classroom: 'P101',\n          teacher: 'p3',\n          schedule: 'lu-vi 11-17',\n        },\n        {\n          language: 'French',\n          level: 'Inter-4',\n          classroom: 'Z101',\n          teacher: 'p7',\n          schedule: 'sa-do 7-9am',\n        }\n      ],\n    }\n  ],\n  total: 9,\n};\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.listChangeCounter=this.listChangeCounter.bind(this);\n    this.state = this.initialState();\n    this.props.initialize();\n  }\n  initialState () {\n    return initialData;\n  }\n  shouldComponentUpdate (nextProps, nextState) {\n    nextState.total = nextProps.total;\n    return true;\n  }\n  addData () {\n    const newLists = [...this.state.lists];\n    newLists.push({\n      course: 'German',\n      groups: [\n        {\n          language: 'German',\n          level: 'Basic-1',\n          classroom: 'B101',\n          teacher: 'p1',\n          schedule: 'lu-vi 7-9am',\n        },\n        {\n          language: 'German',\n          level: 'Basic-2',\n          classroom: 'P101',\n          teacher: 'p3',\n          schedule: 'lu-vi 11-17',\n        },\n        {\n          language: 'German',\n          level: 'Inter-4',\n          classroom: 'Z101',\n          teacher: 'p7',\n          schedule: 'sa-do 7-9am',\n        }\n      ],\n    });\n    this.setState({lists: newLists});\n  }\n  listChangeCounter (reduce) {\n    this.setState({total: this.state.total-reduce});\n  }\n  render () {\n    return (\n      <div>\n        <button onClick={() => this.addData()}>Add</button>\n        Total students : <span className='red'>{this.state.total} </span>\n        {this.state.lists.map((list, index) => {\n          list.index=index;\n          return (\n            <List key={index} data={list} onChangeCounter={this.listChangeCounter}/>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    total: state.totalStudents,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  const eventExecute = () => {\n    console.log('initialize app data');\n    dispatch(initializeLists(initialData.lists));\n  };\n\n  return {\n    initialize: eventExecute\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_TOTAL_STUDENTS_LISTS, CHANGE_TOTAL_STUDENTS_GROUP, INITIALIZE_LISTS } from '../actions/actions';\n\nconst initialState = {\n    totalStudents: 0,\n    lists: [],\n};\n\nfunction processChangeLists (state, payload) {\n    return {\n        totalStudents: state.totalStudents+payload.change,\n        lists: state.lists,\n    };\n}\n\nfunction processChangeGroup (state, payload) {\n    const changeLists = state.lists.map((val, index) => {\n        if ((index+0) !== (payload.idList+0)) return val;\n        val.totalStudents = (val.totalStudents ? val.totalStudents : getListTotalStudents(val))+payload.change;\n        return val;\n    });\n\n    return {\n        totalStudents: state.totalStudents,\n        lists: changeLists,\n    };\n}\n\nfunction processInitializeLists (state, payload) {\n    const total = payload.lists.reduce((acc, list) => acc+getListTotalStudents(list),0);\n\n    return {\n        totalStudents: total,\n        lists: payload.lists,\n    };\n}\n\nfunction getListTotalStudents (list) {\n    if (list.groups.length) return list.groups.reduce((accG, group) => accG+(group.students ? group.students.length : 0),0);\n    return 0;\n}\n\nexport default function (state=initialState, action) {\n    switch (action.type) {\n        case CHANGE_TOTAL_STUDENTS_LISTS: return processChangeLists(state, action.payload);\n        case CHANGE_TOTAL_STUDENTS_GROUP: return processChangeGroup(state, action.payload);\n        case INITIALIZE_LISTS: return processInitializeLists(state, action.payload);\n        default: return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './redux/reducer/index';\n\nlet store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}> <App /> </Provider>,\n    document.getElementById('root')\n);\n\n// ReactDOM.render(\n//     <App />,\n//     document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}